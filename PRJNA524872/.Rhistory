library(Biostrings)
library("tidyr")
library("dplyr")
library("stringr")
fna <- readDNAStringSet("cds_from_genomic.fna") %>% # extract .fna file (proteins' sequences)
as.data.frame()
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)
fna <- fna[!is.na(fna$protein_id), ] # removes rows with no protein_id
faa <- readDNAStringSet("protein.faa")
faa_ids <- sub(" .*", "", names(faa))  # take only the protein_id
faa@ranges@NAMES
fna <- fna[fna$protein_id %in% faa_ids,] # select protein_id that are both in .faa and .fna
order_idx <- match(fna$protein_id, faa_ids)
ordered_faa <- faa[order_idx]
#writeXStringSet(ordered_faa, "reordered.faa") # save the ordered .faa file
View(ordered_faa)
ordered_faa@ranges@NAMES
writeXStringSet(ordered_faa, "reordered.faa") # save the ordered .faa file
View(faa)
View(ordered_faa)
fna <- fna[fna$protein_id %in% faa_ids,] # select protein_id that are both in .faa and .fna
order_idx <- match(faa_ids, fna$protein_id) # match the order of the proteins from .fna
ordered_faa <- faa[order_idx] # apply the right order to the .faa
ordered_faa <- faa[order_idx] # apply the right order to the .faa
order_idx <- match(fna$protein_id, faa_ids) # match the order of the proteins from .fna
fna$protein_id %in% faa_ids
fna[fna$protein_id %in% faa_ids == FALSE, ]
fna[fna$protein_id %in% faa_ids == TRUE, ]
fna[faa_ids %in% fna$protein_id == TRUE, ]
fna[faa_ids %in% fna$protein_id, ]
fna$protein_id[duplicated(fna$protein_id)]
fna[duplicated(fna)]
duplicated(fna)
fna[duplicated(fna), ]
fna <- readDNAStringSet("cds_from_genomic.fna") %>% # extract .fna file (proteins' sequences)
as.data.frame()
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- fna[!is.na(fna$protein_id), ] # removes rows with no protein_id
fna <- fna[!is.na(fna$protein_id) & !duplicated(fna), ] # removes rows with no protein_id
fna[duplicated(fna), ]
fna <- readDNAStringSet("cds_from_genomic.fna") %>% # extract .fna file (proteins' sequences)
as.data.frame()
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
#fna <- fna[!is.na(fna$protein_id) & !duplicated(fna), ] # removes rows with no protein_id
fna[duplicated(fna), ]
fna[duplicated(fna$protein_id), ]
fna <- fna[!is.na(fna$protein_id), ]
fna[duplicated(fna$protein_id), ]
unique(fna$protein_id)
fna[!unique(fna$protein_id),]
unique(fna$protein_id)
fna[!fna$protein_id %in% unique(fna$protein_id)]
fna[fna$protein_id %in% unique(fna$protein_id)]
fna[fna$protein_id %in% unique(fna$protein_id), ]
View(fna)
library("seqinr")
faa <- read.fasta("protein.faa")
View(faa)
_
fna <- read.fasta("cds_from_genomic.fna") #%>% # extract .fna file (proteins' sequences)
View(fna)
fna <- read.fasta("cds_from_genomic.fna") %>% # extract .fna file (proteins' sequences)
as.data.frame()
View(fna)
attributes(fna)[["Annot"]]
attributes(fna[,])[["Annot"]]
fna <- fna %>% as.data.frame()
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) %>% # extract .fna file (proteins' sequences)
as.data.frame()
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- fna[!is.na(fna$protein_id), ]
#fna <- fna[!is.na(fna$protein_id) & !duplicated(fna), ] # removes rows with no protein_id
fna <- read.fasta("cds_from_genomic.fna") %>% # extract .fna file (proteins' sequences)
as.data.frame()
fna <- read.fasta("cds_from_genomic.fna") #%>% # extract .fna file (proteins' sequences)
View(fna)
fna <- read.fasta("cds_from_genomic.fna"? as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
View(fna)
fna[["lcl|NZ_MCTE02000001.1_cds_WP_408103861.1_1"]]
View(faa)
faa[["WP_000090472.1"]]
df <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # colonne ADN
name = sapply(fna, function(x) attr(x, "name")),              # colonne name
annot = sapply(fna, function(x) attr(x, "Annot")),            # colonne Annot
stringsAsFactors = FALSE
)
# VÃ©rifier
head(df)
View(df)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
) %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
) %>% mutate( # add column with protein_id
protein_id = str_extract(Annot, "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
) %>% mutate( # add column with protein_id
protein_id = str_extract(fna$Annot, "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(fna$Annot, "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
'''fna <- fna %>% mutate(
protein_id = str_extract(fna$Annot, "(?<=protein_id=)[^]]+") # add column with protein_id
)  %>%
cbind(row.names(fna))
fna <- fna[!is.na(fna$protein_id), ] # remove NA
'''
View(fna)
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
) %>% mutate(
protein_id = str_extract(fna$annot, "(?<=protein_id=)[^]]+") # add column with protein_id
)  %>%
cbind(row.names(fna))
str_extract(fna$annot, "(?<=protein_id=)[^]]+")
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
View(fna)
str_extract(fna$annot, "(?<=protein_id=)[^]]+")
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)  %>%
cbind(row.names(fna))
fna <- fna[!is.na(fna$protein_id), ]
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(rownames(fna), "(?<=protein_id=)[^]]+")
)
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(fna$annot, "(?<=protein_id=)[^]]+")
)
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(fna$annot, "(?<=protein_id=)[^]]+")
) %>%
cbind(row.names(fna))
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) #%>% # extract .fna file (proteins' sequences)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(fna$annot, "(?<=protein_id=)[^]]+")
)
row.names(fna) <- NULL
fna <- read.fasta("cds_from_genomic.fna", as.string = TRUE) # extract .fna file (proteins' sequences)
fna <- data.frame(
sequence = sapply(fna, function(x) paste(x, collapse = "")),  # DNA
name = sapply(fna, function(x) attr(x, "name")),              # name
annot = sapply(fna, function(x) attr(x, "Annot")),            # Annot
stringsAsFactors = FALSE
)
fna <- fna %>% mutate( # add column with protein_id
protein_id = str_extract(fna$annot, "(?<=protein_id=)[^]]+")
)
row.names(fna) <- NULL # reset indexes
fna <- fna[!is.na(fna$protein_id), ] # remove rows with no protein_id
faa <- read.fasta("protein.faa")
names(faa)
faa_ids <- sub(" .*", "", names(faa))  # create list with protein_id
fna <- fna[fna$protein_id %in% faa_ids,] # select protein_id that are both in .faa and .fna
View(fna)
order_idx <- match(fna$protein_id, faa_ids) # match the order of the proteins from .fna
ordered_faa <- faa[order_idx] # apply the right order to the .faa
View(ordered_faa)
ordered_faa
type(ordered_faa)
View(ordered_faa)
ordered_faa[["WP_408103861.1"]]
ordered_faa[["WP_408103861.1"]]
ordered_faa[4160]
fna <- fna[fna$protein_id %in% faa_ids,]
fna$protein_id %in% faa_ids
faa[['WP_408103861.1']]
#writeXStringSet(ordered_faa, "reordered.faa") # save the ordered .faa file
# Extract names
seq_names <- sapply(ordered_faa, function(x) attr(x, "name"))
# Optional: annotations (as comment lines) â you can prepend to sequence name
seq_annot <- sapply(ordered_faa, function(x) attr(x, "Annot"))
# If you want to include the annotation in the header
headers <- paste0(seq_names, " ", seq_annot)
# Write FASTA
write.fasta(sequences = lapply(sequences, s2c), names = headers,file.out = "reordered.faa")
sapply(ordered_faa, function(x) attr(x, "name"))
seq_annot <- sapply(ordered_faa, function(x) attr(x, "Annot"))
sapply(ordered_faa, function(x) attr(x, "Annot"))
faa[["WP_000090472.1"]]
# Write FASTA
write.fasta(sequences = ordered_faa, names = sapply(ordered_faa, function(x) attr(x, "Annot")),file.out = "reordered.faa")
sapply(ordered_faa, function(x) attr(x, "Annot"))
sub("^>", "", sapply(ordered_faa, function(x) attr(x, "Annot")))
write.fasta(sequences = ordered_faa, names = sub("^>", "", sapply(ordered_faa, function(x) attr(x, "Annot"))),file.out = "reordered.faa")
View(fna)
gff <- read.csv("genomic.gff")
View(gff)
library(rtracklayer)
View(gff)
gff <- import("genomic.gff")
defense_systems <- read.csv("defense_systems.tsv")
defense_systems <- read.csv("defense_systems.tsv", sep = " ")
View(defense_systems)
defense_systems <- read.csv("defense_systems.tsv", header = TRUE, sep = " ")
View(defense_systems)
library(rtracklayer)
defense_systems <- read.csv("defense_systems.tsv", header = FALSE, sep = " ")
gff <- import("genomic.gff")
# GeneID dans la colonne locus_tag de gff et protein_id dans Name
View(defense_systems)
defense_systems <- read.csv("defense_systems.tsv", header = TRUE, sep = "")
gff <- import("genomic.gff")
View(gff)
View(defense_systems)
rownames(gff["Name",]) <- "protein_in_syst"
rownames(gff["Name",])
rownames(gff)
colnames(gff["Name",]) <- "protein_in_syst"
colnames(gff["Name",])
colnames(gff[, "Name"])
colnames(gff)
names(gff)[names(gff) == "Name"] <- "protein_in_syst"
names(gff)
colnames(gff)
gff <- import("genomic.gff") %>% as.data.frame()
gff <- as.data.frame(gff)
mcols(gff)[mcols(gff) == "Name"] <- "protein_in_syst"
mcols(gff)[mcols(gff) == "Name"]
mcols(gff)
View(gff)
gff <- import("genomic.gff") %>% as.data.frame()
library(Biostrings)
library("tidyr")
library("dplyr")
library("stringr")
library("seqinr")
library("seqinr")
gff <- as.data.frame(gff, row.names = NULL)
colnames(gff)[colnames(gff) == "Name"] <- "protein_in_syst"
gff <- import("genomic.gff")
gff <- as.data.frame(gff[gff["type",] == "CDS"], row.names = NULL)
gff <- import("genomic.gff")
gff <- as.data.frame(gff, row.names = NULL)
gff[gff["type",] == "CDS"]
gff[gff["type",] == "CDS", ]
gff[, gff["type",] == "CDS"]
gff["type",] == "CDS"
gff[, "type"] == "CDS"
gff[gff[, "type"] == "CDS", ]
gff <- import("genomic.gff")
gff <- as.data.frame(gff[gff[, "type"] == "CDS", ], row.names = NULL)
gff <- as.data.frame(gff, row.names = NULL)
gff_cds <- gff[gff[, "type"] == "CDS", ]
colnames(gff)[colnames(gff) == "Name"] <- "protein_in_syst"
colnames(gff_cds)[colnames(gff_cds) == "Name"] <- "protein_in_syst"
defense_systems["protein_in_syst"]
defense_systems["protein_in_syst"]
defense_systems["protein_in_syst"] <- defense_systems["protein_in_syst"].str.split(',')
#library(rtracklayer)
defense_systems <- read.csv("defense_systems.tsv", header = TRUE, sep = "")
gff <- import("genomic.gff")
gff <- as.data.frame(gff, row.names = NULL)
gff_cds <- gff[gff[, "type"] == "CDS", ]
colnames(gff_cds)[colnames(gff_cds) == "Name"] <- "protein_in_syst"
defense_systems["protein_in_syst"] <- defense_systems["protein_in_syst"].str.split(',')
defense_systems["protein_in_syst"] <- defense_systems["protein_in_syst"].strsplit(',')
defense_systems["protein_in_syst"] <- defense_systems["protein_in_syst"] %>% strsplit(',')
defense_systems["protein_in_syst"] <- defense_systems["protein_in_syst"] %>% lapply(strsplit(','))
defense_systems <- defense_systems %>% separate_rows("protein_in_syst", sep = ",")
defense_systems <- defense_systems %>%
left_join(gff_cds, by = "protein_in_syst")
# GeneID dans la colonne locus_tag de gff et protein_id dans Name
colnames(defense_systems)
#library(rtracklayer)
# load annotation features .gff
gff <- import("genomic.gff")
gff <- as.data.frame(gff, row.names = NULL)
gff_cds <- gff[gff[, "type"] == "CDS", c("protein_in_syst", "locus_tag")] # only keep coding genes
#library(rtracklayer)
# load annotation features .gff
gff <- import("genomic.gff")
gff <- as.data.frame(gff, row.names = NULL)
gff_cds <- gff[gff[, "type"] == "CDS", c("Name", "locus_tag")] # only keep coding genes
colnames(gff_cds)[colnames(gff_cds) == "Name"] <- "protein_in_syst"
View(gff_cds)
defense_systems <- defense_systems %>%
left_join(gff_cds, by = "protein_in_syst")
colnames(defense_systems)
# load defense systems of Vibrio cyclitrophicus obtained from defense finder
defense_systems <- read.csv("defense_systems.tsv", header = TRUE, sep = "")
# separate rows with several associated proteins
defense_systems <- defense_systems %>% separate_rows("protein_in_syst", sep = ",")
defense_systems <- defense_systems %>%
left_join(gff_cds, by = "protein_in_syst")
colnames(defense_systems)
colnames(defense_systems[colnames(defense_systems)=="locus_tag"]) <- "GeneID"
View(defense_systems)
names(defense_systems)
names(defense_systems)[names(defense_systems)=="locus_tag"] <- "GeneID"
names(defense_systems)
defense_systems <- defense_systems %>%
left_join(gff_cds, by = "protein_in_syst")
names(defense_systems)[names(defense_systems)=="locus_tag"] <- "Geneid"
names(defense_systems)
# save the defense systems file
write.csv(defense_systems)
# save the defense systems file
write.csv(defense_systems, file = "defense_systems.csv")
library("DESeq2")
library(dplyr)
library(stringr)
library(apeglm)
library(ggplot2)
library("EnhancedVolcano")
library("tidyr")
library(edgeR)
library(patchwork)
library(Biostrings)
library("seqinr")
SRRs <- read.csv("PRJNA524872.csv", header = TRUE)
SRRs <- SRRs %>%
mutate(State = ifelse(str_detect(Sample.Name, "Control"), "control", "infected"),
time_point = str_extract(Sample.Name, "\\d+")
)
cts <- read.table("defense-infection-transcriptomics-QC2-feature-counts-summary.tsv", header = TRUE)
names(cts)[names(cts) == "run_accession"] <- "Run"
cts <- cts %>% filter(Run %in% SRRs$Run)
cnt_matrix <- cts[grepl("^NZ", cts$Chr), ] %>% # filter bacteria genes
left_join(SRRs, by = "Run") %>%
mutate(condition = paste(time_point, State, sep = "_")) %>%
select(Geneid, condition, counts) %>%
pivot_wider(names_from = condition,
values_from = counts,
values_fill = 0) %>%
as.data.frame()
rownames(cnt_matrix) <- cnt_matrix$Geneid
cnt_matrix <- cnt_matrix[ , -1]
View(cnt_matrix)
ds <- read.csv("defense_systems.csv", header = TRUE)[, c("Geneid", "type")]
deseq_volcano_c_i <- function(t) {
# columns of cnt_matrix to select
cols <- c(
paste0(t, "_control"),
paste0(t, "_infected")
)
# construction of DESeq dataset
coldata <- data.frame(
row.names = cols,
condition = factor(c("control", "infected"))
)
countData <- round(cnt_matrix[,cols])
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = coldata,
design = ~ condition)
# differential expression analysis
dds <- DESeq(dds)
res <- as.data.frame(results(dds, alpha = 0.1, pAdjustMethod = "fdr"))
# label for defense genes
labels <- rownames(res) %>%
as.data.frame() %>%
`colnames<-`("Geneid") %>%
left_join(ds, by = "Geneid") %>%
mutate(label = ifelse(is.na(type), "", type)) %>%
pull(label)
# add column labels (character and logical)
res <- mutate(res, label=labels)
res <- mutate(res, ds = factor(res$label != ""))
# plot -Log10 FDR vs Log fold change
plot <- ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = ds)) +
geom_point(data = subset(res, ds == "FALSE"), color = "grey", alpha = 0.3) +
geom_point(data = subset(res, ds == "TRUE"), color = "darkgreen") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "black") +
geom_label_repel(data = subset(res, ds == "TRUE" & padj < 0.05),
aes(label = label),
size = 3,
max.overlaps = Inf,
show.legend = NA,
colour = "black"
) +
xlim(-5, 5) +
ylim(0, 10) +
annotate("text", x=-3, y=10, label = paste0("Time_point = ",t)) +
theme_bw()
return(plot)
}
View(cts)
deseq_volcano_c_i(0)
