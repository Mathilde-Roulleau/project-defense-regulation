if (!require(installr)) install.packages("installr")
library(installr)
# Vérifie et lance la mise à jour
updateR()
installed.packages("EnhancedVolcano")
library("EnhancedVolcano")
BiocManager::install("EnhancedVolcano")
BiocManager::install("EnhancedVolcano")
library("EnhancedVolcano")
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library("EnhancedVolcano")
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
library("DESeq2")
library(dplyr)
library(stringr)
library(apeglm)
library(ggplot2)
library("EnhancedVolcano")
SRRs <- read.csv("PRJNA303174.csv", header = TRUE)
SRRs <- SRRs %>%
mutate(
State = ifelse(str_detect(Sample.Name, "C$"), "control", "infected"))
SRRs <- SRRs %>% filter(strain == "18")
cts <- read.table("GCF_000468615.2-with-GCF_000909635.1-feature-counts-summary.tsv", header = TRUE)
ds <- read.csv("DS_strain18_gene_names.csv", header = TRUE)[, c("Geneid", "subtype")]
cts2 <- cts[, c("Geneid", "run_accession", "counts")]
names(cts2)[names(cts2) == "run_accession"] <- "Run"
SRR_infos <- SRRs[, c("Run", "time_point", "State")]
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State)) %>%
group_by(Geneid, condition) %>%
summarise(mean_counts = mean(counts, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = condition,
values_from = mean_counts,
values_fill = 0) %>%
as.data.frame()
install.packages("tidyr")
library("tidyr")
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State)) %>%
group_by(Geneid, condition) %>%
summarise(mean_counts = mean(counts, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = condition,
values_from = mean_counts,
values_fill = 0) %>%
as.data.frame()
rownames(cnt_matrix) <- cnt_matrix$Geneid
cnt_matrix <- cnt_matrix %>% select(-Geneid)
cnt_matrix[] <- lapply(cnt_matrix, as.integer)
samples <- colnames(cnt_matrix)
coldata <- data.frame(
row.names = samples,
condition = samples
) %>%
tidyr::separate(condition, into = c("time_point", "State"), sep = "_")
# convertit en facteur pour que ca ne soit plus des charactères pour le design
coldata <- coldata %>%
mutate(
time_point = as.factor(time_point),
State = factor(State, levels = c("control", "infected"))
)
dds <- DESeqDataSetFromMatrix(countData = cnt_matrix,
colData = coldata,
design = ~ time_point + State)
dds <- DESeq(dds)
# extracts a results table with log2 fold changes (LFC = log2(C/I)), p values and adjusted p values
# Chaque test a un p-value qui indique la probabilité d’observer un effet aussi extrême si le gène n’était pas différentiellement exprimé.
res <- results(dds, contrast=c("State","control","infected"))
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
# Les LFC estimés par DESeq2 peuvent être extrêmes pour les gènes peu exprimés -> shrinkage
resLFC <- lfcShrink(dds, coef="State_infected_vs_control", type="apeglm")
EnhancedVolcano(resLFC,
lab = rownames(resLFC),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(resLFC,
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(resLFC,
lab = rownames(resLFC),
x = 'log2FoldChange',
y = 'pvalue'),
EnhancedVolcano(resLFC,
lab = rownames(resLFC),
x = 'log2FoldChange',
y = 'pvalue',
col=c('black', 'black', 'black', 'black'))
row.names(ds)
View(ds)
# label pour afficher les subtype des gènes impliqués dans les systèmes de défense
labels <- rownames(res) %>%
as.data.frame() %>%
rename(Geneid = ".") %>%
left_join(ds, by = "Geneid") %>%
mutate(label = ifelse(is.na(subtype), "", subtype)) %>%
pull(label)
EnhancedVolcano(resLFC,
lab = labels,
x = 'log2FoldChange',
y = 'pvalue',
col=c('black', 'black', 'black', 'black'))
resultsNames(dds)
dds0 <- dds[, dds$time_point == 0]
dds0$time_point <- droplevels(dds0$time_point)
dds0 <- DESeq(dds0)
View(dds0)
dds0 <- dds[, dds$time_point == 0]
dds0$time_point <- droplevels(dds0$time_point)
design(dds0) <- ~ State
dds0 <- DESeq(dds0)
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State)) %>%
select(Geneid, Run, counts) %>%
pivot_wider(names_from = Run, values_from = counts, values_fill = 0) %>%
as.data.frame()
rownames(cnt_matrix) <- cnt_matrix$Geneid
cnt_matrix <- cnt_matrix %>% select(-Geneid)
cnt_matrix[] <- lapply(cnt_matrix, as.integer)
samples <- colnames(cnt_matrix)
coldata <- data.frame(
row.names = samples,
condition = samples
) %>%
tidyr::separate(condition, into = c("time_point", "State"), sep = "_")
# convertit en facteur pour que ca ne soit plus des charactères pour le design
coldata <- coldata %>%
mutate(
time_point = as.factor(time_point),
State = factor(State, levels = c("control", "infected"))
)
dds <- DESeqDataSetFromMatrix(countData = cnt_matrix,
colData = coldata,
design = ~ time_point + State)
View(cnt_matrix)
View(cnt_matrix)
any(is.na(coldata))
sum(is.na(coldata))
View(coldata)
View(coldata)
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
group_by(time_point, State) %>%
mutate(rep = row_number()) %>%   # numérotation des runs dans chaque condition
ungroup() %>%
mutate(condition = paste0(time_point, "_", State, "_rep", rep)) %>%
select(Geneid, condition, counts) %>%
pivot_wider(
names_from = condition,
values_from = counts,
values_fill = 0
) %>%
as.data.frame()
library("DESeq2")
library(dplyr)
library(stringr)
library(apeglm)
library(ggplot2)
library("EnhancedVolcano")
library("tidyr")
SRRs <- read.csv("PRJNA303174.csv", header = TRUE)
SRRs <- SRRs %>%
mutate(
State = ifelse(str_detect(Sample.Name, "C$"), "control", "infected"))
SRRs <- SRRs %>% filter(strain == "18")
cts <- read.table("GCF_000468615.2-with-GCF_000909635.1-feature-counts-summary.tsv", header = TRUE)
ds <- read.csv("DS_strain18_gene_names.csv", header = TRUE)[, c("Geneid", "subtype")]
cts2 <- cts[, c("Geneid", "run_accession", "counts")]
names(cts2)[names(cts2) == "run_accession"] <- "Run"
SRR_infos <- SRRs[, c("Run", "time_point", "State")]
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
group_by(time_point, State) %>%
mutate(rep = row_number()) %>%   # numérotation des runs dans chaque condition
ungroup() %>%
mutate(condition = paste0(time_point, "_", State, "_rep", rep)) %>%
select(Geneid, condition, counts) %>%
pivot_wider(
names_from = condition,
values_from = counts,
values_fill = 0
) %>%
as.data.frame()
#rownames(cnt_matrix) <- cnt_matrix$Geneid
#cnt_matrix <- cnt_matrix %>% select(-Geneid)
#cnt_matrix[] <- lapply(cnt_matrix, as.integer)
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State)) %>%
group_by(Geneid, condition) %>%
summarise(mean_counts = mean(counts, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = condition,
values_from = mean_counts,
values_fill = 0) %>%
as.data.frame()
#rownames(cnt_matrix) <- cnt_matrix$Geneid
#cnt_matrix <- cnt_matrix %>% select(-Geneid)
#cnt_matrix[] <- lapply(cnt_matrix, as.integer)
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State)) %>%
group_by(Geneid, condition) %>%
#  summarise(mean_counts = mean(counts, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = condition,
values_from = mean_counts,
values_fill = 0) %>%
as.data.frame()
SRR_infos <- SRRs[, c("Run", "time_point", "State")]
SRR_infos <- SRR_infos %>%
group_by(time_point, State) %>%
mutate(rep = row_number()) %>%
ungroup()
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State, "_", rep)) %>%
group_by(Geneid, condition) %>%
pivot_wider(names_from = condition,
values_from = counts,
values_fill = 0) %>%
as.data.frame()
#rownames(cnt_matrix) <- cnt_matrix$Geneid
#cnt_matrix <- cnt_matrix %>% select(-Geneid)
#cnt_matrix[] <- lapply(cnt_matrix, as.integer)
cnt_matrix <- cts2 %>%
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste0(time_point, "_", State, "_", rep)) %>%
pivot_wider(names_from = condition,
values_from = counts,
values_fill = 0) %>%
as.data.frame()
#rownames(cnt_matrix) <- cnt_matrix$Geneid
#cnt_matrix <- cnt_matrix %>% select(-Geneid)
#cnt_matrix[] <- lapply(cnt_matrix, as.integer)
library("DESeq2")
library(dplyr)
library(stringr)
library(apeglm)
library(ggplot2)
library("EnhancedVolcano")
library("tidyr")
library(edgeR)
library(patchwork)
SRRs <- read.csv("PRJNA303174.csv", header = TRUE)
SRRs <- SRRs %>%
mutate(
State = ifelse(str_detect(Sample.Name, "C$"), "control", "infected"))
SRRs <- SRRs %>% filter(strain == "18")
cts <- read.table("GCF_000468615.2-with-GCF_000909635.1-feature-counts-summary.tsv", header = TRUE)
ds <- read.csv("DS_strain18_gene_names.csv", header = TRUE)[, c("Geneid", "subtype")]
names(cts)[names(cts) == "run_accession"] <- "Run"
SRR_infos <- SRRs[, c("Run", "time_point", "State")]
# add rep column
SRR_infos <- SRR_infos %>%
group_by(time_point, State) %>%
mutate(rep = row_number()) %>%
ungroup()
cnt_matrix <- cts[grepl("^NZ", cts$Chr), ] %>% # filter phage genes
left_join(SRR_infos, by = "Run") %>%
mutate(condition = paste(time_point, State, rep, sep = "_")) %>%
select(Geneid, Length, condition, counts) %>%
pivot_wider(names_from = condition,
values_from = counts,
values_fill = 0) %>%
as.data.frame()
rownames(cnt_matrix) <- cnt_matrix$Geneid
cnt_matrix <- cnt_matrix[ , -1]
deseq_volcano <- function(t) {
# columns of cnt_matrix to select
cols <- c(
paste0(t, "_control_1"),
paste0(t, "_control_2"),
paste0(t, "_control_3"),
paste0(t, "_infected_1"),
paste0(t, "_infected_2"),
paste0(t, "_infected_3")
)
# construction of DESeq dataset
coldata <- data.frame(
row.names = cols,
condition = factor(c("control", "control", "control", "infected", "infected", "infected"))
)
countData <- round(cnt_matrix[,cols])
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = coldata,
design = ~ condition)
# differential expression analysis
dds <- DESeq(dds)
res <- as.data.frame(results(dds))
# label for defense genes
labels <- rownames(res) %>%
as.data.frame() %>%
`colnames<-`("Geneid") %>%
left_join(ds, by = "Geneid") %>%
mutate(label = ifelse(is.na(subtype), "", subtype)) %>%
pull(label)
# add column labels (character and logical)
res <- mutate(res, label=labels)
res <- mutate(res, ds = factor(res$label != ""))
# plot -Log10 FDR vs Log fold change
plot <- ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = ds)) +
geom_point(data = subset(res, ds == "FALSE"), color = "black", alpha = 0.3) +
geom_point(data = subset(res, ds == "TRUE"), color = "green") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "black") +
geom_label_repel(data = subset(res, ds == "TRUE"),
aes(label = label),
size = 3,
max.overlaps = Inf,
show.legend = NA,
colour = "black"
) +
xlim(-5, 5) +
ylim(-5, 50) +
annotate("text", x=-4, y=50, label = paste0("Time_point = ",t))
return(plot)
}
plot0 <- deseq_volcano(0)
plot20 <- deseq_volcano(20)
plot40 <- deseq_volcano(40)
plot60 <- deseq_volcano(60)
plot100 <- deseq_volcano(120)
plot0 + plot20 + plot40 + plot60 + plot100 + plot_layout(nrow = 2)
plot0
plot0
deseq_volcano <- function(t) {
# columns of cnt_matrix to select
cols <- c(
paste0(t, "_control_1"),
paste0(t, "_control_2"),
paste0(t, "_control_3"),
paste0(t, "_infected_1"),
paste0(t, "_infected_2"),
paste0(t, "_infected_3")
)
# construction of DESeq dataset
coldata <- data.frame(
row.names = cols,
condition = factor(c("control", "control", "control", "infected", "infected", "infected"))
)
countData <- round(cnt_matrix[,cols])
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = coldata,
design = ~ condition)
# differential expression analysis
dds <- DESeq(dds)
res <- as.data.frame(results(dds))
# label for defense genes
labels <- rownames(res) %>%
as.data.frame() %>%
`colnames<-`("Geneid") %>%
left_join(ds, by = "Geneid") %>%
mutate(label = ifelse(is.na(subtype), "", subtype)) %>%
pull(label)
# add column labels (character and logical)
res <- mutate(res, label=labels)
res <- mutate(res, ds = factor(res$label != ""))
# plot -Log10 FDR vs Log fold change
plot <- ggplot(res, aes(x = log2FoldChange, y = -log10(padj), color = ds)) +
geom_point(data = subset(res, ds == "FALSE"), color = "black", alpha = 0.3) +
geom_point(data = subset(res, ds == "TRUE"), color = "green") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "black") +
geom_label_repel(data = subset(res, ds == "TRUE"),
aes(label = label),
size = 3,
max.overlaps = Inf,
show.legend = NA,
colour = "black"
) +
xlim(-4, 4) +
ylim(-5, 30) +
annotate("text", x=-4, y=50, label = paste0("Time_point = ",t))
return(plot)
}
plot0 <- deseq_volcano(0)
plot0
plot20 <- deseq_volcano(20)
plot20
plot40 <- deseq_volcano(40)
plot40
plot60 <- deseq_volcano(60)
plot60
plot120 <- deseq_volcano(120)
plot120
# columns of cnt_matrix to select
t <- 120
cols <- c(
paste0(t, "_control_1"),
paste0(t, "_control_2"),
paste0(t, "_control_3"),
paste0(t, "_infected_1"),
paste0(t, "_infected_2"),
paste0(t, "_infected_3")
)
# construction of DESeq dataset
coldata <- data.frame(
row.names = cols,
condition = factor(c("control", "control", "control", "infected", "infected", "infected"))
)
countData <- round(cnt_matrix[,cols])
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = coldata,
design = ~ condition)
# differential expression analysis
dds <- DESeq(dds)
res <- as.data.frame(results(dds))
View(dds)
View(res)
summary(res$pvalue)
min(res$pvalue, na.rm = TRUE)
hist(res$pvalue, breaks = 50)
